{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,yBA4BtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAlCPT,EAAKC,KAAKe,iBAAiB,UAAU,SAAUC,GAC7CA,EAAEC,iBAMF,IAJA,IAAMC,EAAQC,SAASpB,EAAKI,WAAWiB,OACjCC,EAAOF,SAASpB,EAAKK,UAAUgB,OAC/BE,EAASH,SAASpB,EAAKM,YAAYe,OAEhCG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChCjB,EAAciB,EAAGL,GAASK,EAAI,GAAKF,GAChCG,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACjBkB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAGjDsB,OAAM,SAAAL,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MAClBkB,EAAA7B,GAAS8B,OAAOI,QACd,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAInDT,EAAKI,WAAWiB,MAAQ,GACxBrB,EAAKK,UAAUgB,MAAQ,GACvBrB,EAAKM,YAAYe,MAAQ,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n}\n\nrefs.form.addEventListener('submit', function (e) {\n  e.preventDefault();\n\n  const delay = parseInt(refs.delayInput.value);\n  const step = parseInt(refs.stepInput.value);\n  const amount = parseInt(refs.amountInput.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay + (i - 1) * step)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  refs.delayInput.value = '';\n  refs.stepInput.value = '';\n  refs.amountInput.value = '';\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delayInput","stepInput","amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","delay1","parseInt","value","step","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.960ec8bd.js.map"}